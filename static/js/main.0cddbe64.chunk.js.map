{"version":3,"sources":["components/LengthSetter.jsx","components/Controls.jsx","components/Display.jsx","components/Clock.jsx","pages/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["props","className","id","title","toLowerCase","onClick","changeHandler","state","icon","faChevronDown","faChevronUp","timeRunning","pauseTimer","faPause","startTimer","faPlay","resetHandler","faUndo","Display","seconds","containerClass","classNames","time","isSession","String","Math","floor","toFixed","padStart","Date","toISOString","substr","Clock","useState","breakLength","setBreakLength","sessionLength","setSessionLength","isRunning","setIsRunning","setTime","counter","setCounter","setIsSession","audioBeep","useRef","tick","console","log","current","clearInterval","play","LengthSetter","newLength","Controls","pause","currentTime","setInterval","preload","src","ref","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0cddbe64.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChevronUp, faChevronDown } from \"@fortawesome/free-solid-svg-icons\";\n\nexport default (props) => {\n  return (\n    <div className=\"flex flex-col items-center justify-center p-2 mb-4\">\n      <div\n        className=\"text-xl\"\n        id={`${props.title.toLowerCase()}-label`}\n      >{`${props.title} Length`}</div>\n      <div className=\"flex justify-center items-center\">\n        <button\n          className=\"focus:outline-none\"\n          id={`${props.title.toLowerCase()}-decrement`}\n          onClick={() => props.changeHandler(props.state - 1)}\n        >\n          <FontAwesomeIcon icon={faChevronDown} />\n        </button>\n        <div\n          className=\"mx-3 w-4 text-center\"\n          id={`${props.title.toLowerCase()}-length`}\n        >\n          {props.state}\n        </div>\n        <button\n          className=\"focus:outline-none\"\n          id={`${props.title.toLowerCase()}-increment`}\n          onClick={() => props.changeHandler(props.state + 1)}\n        >\n          <FontAwesomeIcon icon={faChevronUp} />\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faPause, faUndo } from \"@fortawesome/free-solid-svg-icons\";\n\nexport default  (props) => {\n  return (\n    <div className=\"flex items-center justify-center\">\n      {props.timeRunning ? (\n        <button className=\" focus:outline-none p-4\" id=\"start_stop\" onClick={props.pauseTimer}>\n          <FontAwesomeIcon icon={faPause} />\n        </button>\n      ) : (\n        <button className=\" focus:outline-none p-4\" id=\"start_stop\" onClick={props.startTimer}>\n          <FontAwesomeIcon icon={faPlay} />\n        </button>\n      )}\n      <button\n        className=\"focus:outline-none\"\n        id=\"reset\"\n        onClick={() => props.resetHandler()}\n      >\n        <FontAwesomeIcon icon={faUndo} />\n      </button>\n    </div>\n  );\n};\n\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nconst Display = props => {\n  const formatMinutes = seconds =>\n    String(Math.floor(seconds / 60).toFixed(0)).padStart(2, 0);\n\n  const containerClass = classNames(\n    \"flex\",\n    \"flex-col\",\n    \"justify-center\",\n    \"items-center\",\n    \"border-4\",\n    \"rounded-lg\",\n    \"border-gray-700\",\n    \" p-2\",\n    \"w-1/2\",\n    {\n      \"text-red-700\": props.time < 60,\n      'blink': props.time < 10\n    }\n  );\n\n  return (\n    <div className={containerClass}>\n      <div className=\"text-2xl\" id=\"timer-label\">\n        {props.isSession ? \"Session\" : \"Break\"}\n      </div>\n      <div className=\"text-6xl display\" id=\"time-left\">\n        {`${formatMinutes(props.time)}:${new Date(props.time * 1000)\n          .toISOString()\n          .substr(17, 2)}`}\n      </div>\n    \n    </div>\n  );\n};\n\nexport default Display;\n","import React, { useState, useRef } from \"react\";\n\nimport LengthSetter from \"./LengthSetter\";\nimport Controls from \"./Controls\";\nimport Display from \"./Display\";\n\nconst Clock = () => {\n  const initialTime = 25 * 60;\n\n  const [breakLength, setBreakLength] = useState(5);\n  const [sessionLength, setSessionLength] = useState(25);\n  const [isRunning, setIsRunning] = useState(false);\n  const [time, setTime] = useState(initialTime);\n  const [counter, setCounter] = useState(null);\n  const [isSession, setIsSession] = useState(true);\n\n  \n\n  let audioBeep = useRef();\n\n  const handleBreakLength = newLength => {\n    if (isRunning) {\n      return;\n    }\n    if (newLength >= 1 && newLength <= 60) {\n      setBreakLength(newLength);\n    }\n    return;\n  };\n\n  const handleSessionLength = newLength => {\n    if (isRunning) {\n      return;\n    }\n    if (newLength >= 1 && newLength <= 60) {\n      setSessionLength(newLength);\n      setTime(newLength * 60);\n\n      return;\n    }\n  };\n\n  const startTimer = () => {\n    setCounter(setInterval(() => tick(), 1000));\n    setIsRunning(true);\n  };\n\n  const tick = () => {\n    setTime(time => time - 1);\n    console.log(audioBeep.current)\n    \n  };\n\n  const pauseTimer = () => {\n    setIsRunning(false);\n    clearInterval(counter);\n    setCounter(null);\n  };\n\n  const handleReset = () => {\n    setSessionLength(25);\n    setBreakLength(5);\n    pauseTimer();\n    setTime(25 * 60);\n    setIsSession(true);\n    audioBeep.current.pause();\n    audioBeep.current.currentTime = 0;\n  };\n\n//don't love this approach \n\n  if (time < 0) {\n    setTime(isSession ? breakLength * 60 : sessionLength * 60);\n    setIsSession(!isSession);\n    audioBeep.current.play();\n  }\n\n  return (\n    <div className=\"flex flex-col p-2 text-white\">\n      <div className=\"text-center text-6xl\"> Pomodoro Clock</div>\n      <div className=\"flex items-center justify-around\">\n        <LengthSetter\n          changeHandler={handleBreakLength}\n          state={breakLength}\n          title=\"Break\"\n        />\n        <LengthSetter\n          changeHandler={handleSessionLength}\n          state={sessionLength}\n          title=\"Session\"\n        />\n      </div>\n      <div className=\"flex items-center justify-center\">\n        <Display time={time} isSession={isSession} />\n      </div>\n      <Controls\n        resetHandler={handleReset}\n        timeRunning={isRunning}\n        startTimer={startTimer}\n        pauseTimer={pauseTimer}\n      />\n      <audio id=\"beep\" preload=\"auto\" src=\"https://goo.gl/65cBl1\"\n      ref={audioBeep}\n      />\n    </div>\n  );\n};\n\nexport default Clock;\n","import React from 'react'\nimport Clock from '../components/Clock'\n\nconst Home = () =>{\n    return(\n        <div className=\"bg-gray-600 h-screen\">\n            <main className=\"flex justify-center items-center h-full\">\n            <Clock />\n            </main>\n        </div>\n\n    )\n}\nexport default Home","import React from \"react\";\nimport Home from './pages/Home'\n\nfunction App() {\n  return (\n    <div>\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/tailwind.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}